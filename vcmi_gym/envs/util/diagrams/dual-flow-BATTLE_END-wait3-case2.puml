@startuml "dual-env"

title "VCMI dual-model training"
' title "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW"

skinparam sequenceBoxBorderColor #FFF

!$nbsp = "<U+00A0>"

' workaround the fact that text alignment can only be
' set globally. Using hspace(n) returns N monospaced
' $nbsp chars
!function $hspace($length)
  !$res = ""
  !$i = $length
  !while $i > 0
    !$res = $res + $nbsp
    !$i = $i - 1
  !endwhile
  !return "<font:monospaced>"+$res+"</font>"
!endfunction

!function $desc($txt)
  !return "<font:Arial><color:Gray><i>// "+$txt+"</i></color></font>"
!endfunction

!function $lock_acq_fail_text()
  !return "<back:yellow><color:red>acquire lock</color></back>"
!endfunction

!function $lock_rel_text()
  !return "<color:yellow><back:black>release lock</back></color>"
!endfunction

!procedure $lock_acq_fail($node)
  $node -> $node : $lock_acq_fail_text()
  activate $node #red
!endprocedure

!procedure $lock_acq_direct($node)
  $node -> $node : <back:yellow>acquire lock</back>
!endprocedure

!procedure $lock_acq_latent($node)
  $lock_acq_direct($node)
  deactivate $node
!endprocedure

!procedure $lock_rel($node)
  $node -> $node : $lock_rel_text()
!endprocedure

!procedure $cond_wait($node)
  $node -> $node : <back:red>cond.wait</back>\n$lock_rel_text()
  activate $node #red
!endprocedure

!procedure $cond_wait($node, $waitName)
  $node -> $node : <back:red>cond.wait</back>\n$lock_rel_text()
  activate $node #red
  note over $node #orange : <font:monospaced>$waitName
!endprocedure

!procedure $cond_notify($NodeA, $NodeB)
  $NodeA --[#blue]> $NodeB : <color:blue>cond.notify</color>
  $NodeB --[#red]> $NodeB : $lock_acq_fail_text()
!endfunction

!procedure $cond_switch($NodeA, $NodeB)
  $cond_notify($NodeA, $NodeB)
  $cond_wait($NodeA)
  $lock_acq_latent($NodeB)
!endfunction

!procedure $cond_switch($NodeA, $NodeB, $waitName)
  $cond_notify($NodeA, $NodeB)
  $cond_wait($NodeA, $waitName)
  $lock_acq_latent($NodeB)
!endfunction

!procedure $flow(envid, $flowname)
  note over CTRL##envid, DualEnv##envid #LightBlue : ↓ flow_##$flowname ↓
!endprocedure

!function $replace($txt, $search, $repl)
  !$replaced = ""
  !while %strpos($txt, $search) >= 0
    !$position = %strpos($txt, $search)
    !$replaced = $replaced + %substr($txt, 0, $position) + $repl
    !$txt = %substr($txt, $position + %strlen($search))
  !endwhile
  !return $replaced + $txt
!endfunction

!procedure $sharevar($node1, $node2, $txt)
  $node1 <--[#gray]> $node2 : <color:gray>$replace($txt,"\n","</color>\n<color:gray>")</color>
!endfunction

!procedure $sharevar($txt)
  $sharevar(CTRL1, CTRL2, $txt)
!endfunction

' avoids super long note lines in the diagram
!function $str($txt)
  !return $replace($txt, "\n", %newline())
!endfunction

box "T1"
  participant "//DualEnv 1//\n$desc(T1)" as DualEnv1
  participant "//Controller//\n$desc(T1)" as CTRL1
  participant "//VcmiEnv//\n$desc(T1)" as env1
end box

box "VCMI (runNetwork thread)"
participant "//BAI 1//\n$desc(T3)" as BAI1
participant "//VCMI//\n$desc(T3)" as VCMI
participant "//BAI 2//\n$desc(T3)" as BAI2
end box

box "T2"
  participant "//VcmiEnv//\n$desc(T2)" as env2
  participant "//Controller//\n$desc(T2)" as CTRL2
  participant "//DualEnv 2//\n$desc(T2)" as DualEnv2
end box

activate BAI1
activate DualEnv2
activate CTRL2
$flow(2, OTHER)
$cond_wait(CTRL2, "3 (OTHER)")

-> DualEnv1 ++ : step()
DualEnv1 -> CTRL1 ++ : step("A", action)
CTRL1 -> env1 ++ : step(action)
env1 -> BAI1 : action
BAI1 -> VCMI -- : makeAction

note over VCMI : (regular battle end)

== BATTLE END ==

VCMI -> BAI1 ++: battleEnd
BAI1 -> env1: getAction(state)\n$desc("expecting RESET")
env1 -> CTRL1 -- : obs, info

$sharevar("self.result = StepResult()")

note over CTRL1
terminated = true
 => flow BATTLE_END
end note

$flow(1, battle_end)

note over CTRL1
store 1st terminal result
<color:red>can be for ANY side
end note

$sharevar("self.termres[obs.side] = StepResult(obs)")

note over CTRL1
step(-1) instead of reset()
$desc("because reward is needed")
end note

CTRL1 -> env1 ++ : step(-1)
env1 -> BAI1 : action\n$desc("ACTION_RESET")
note over BAI1 : embracing death
BAI1 -X BAI1 -- :

VCMI -> BAI2 ++ : battleEnd
BAI2 -> env1: getAction(state)\n$desc("expecting RESET")
env1 -> CTRL1 -- : obs, info

note over CTRL1
Is the 2nd result terminal?
* Yes
$desc("(case 1 of 2)")
end note

$sharevar("state = BATTLE_END")

note over CTRL1
store 2nd terminal result
end note

$sharevar("self.termres[obs.side] = StepResult(obs)")
$cond_switch(CTRL1, CTRL2, "4 (BATTLE_END)")

note over CTRL2
state == BATTLE_END
 => use terminal res
end note

$sharevar("state = RESET")

$cond_notify(CTRL2, CTRL1)

CTRL2 --> DualEnv2 -- : termres[self.side]
DualEnv2 -->] -- : obs

note over DualEnv2, env2 #orange
  without explicit cond.wait(), it seems
  the thread keeps priority here.
  That's what tests reveal, at least.
  However, this can't be //guaranteed//
   => yielding priority anyway in this example
end note

note over DualEnv2, env2 #yellow
Who takes priority?
* The other thread
$desc("(case 2 of 2)")
end note

$lock_acq_latent(CTRL1)

CTRL1 --> DualEnv1 -- : termres[self.side]
[<-- DualEnv1 -- : obs

note across
  Does not matter which thread takes priority here
  The only difference is the client labeling A,B or B,A
end note

[-> DualEnv1 ++ : reset()
DualEnv1 -> CTRL1 ++ : reset("B")

$lock_acq_direct(CTRL1)

note over CTRL1
state == RESET
 => flow REG_A
end note

$flow(1, reg_a)
$sharevar("state = REG")
CTRL1 --[#blue]> CTRL2 : <color:blue>cond.notify</color>
$cond_wait(CTRL1, "1 (REG_A)")

]-> DualEnv2 ++ : reset()
DualEnv2 -> CTRL2 ++ : reset()

$lock_acq_direct(CTRL2)

' VCMI -> BAI2 ++ : battleEnd
' == ... ==

note over CTRL2
state == REG
 => flow REG_B
end note

$flow(2, reg_b)

CTRL2 -> env2 ++ : reset()
env2 -> BAI2 : action\n$desc("ACTION_RESET")
note over BAI2 : embracing death
BAI2 -X BAI2 -- :







== BATTLE START ==


''''''''''''''''''''''''''''''
''' HORIZONTAL SPACING

BAI1 -[#ddd]> env1 : $hspace(20)
BAI2 -[#ddd]> env2 : $hspace(20)

@enduml
