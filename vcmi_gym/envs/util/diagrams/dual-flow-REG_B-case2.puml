@startuml "dual-env"

title "VCMI dual-model training"
' title "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW"

skinparam sequenceBoxBorderColor #FFF

!$nbsp = "<U+00A0>"

' workaround the fact that text alignment can only be
' set globally. Using hspace(n) returns N monospaced
' $nbsp chars
!function $hspace($length)
  !$res = ""
  !$i = $length
  !while $i > 0
    !$res = $res + $nbsp
    !$i = $i - 1
  !endwhile
  !return "<font:monospaced>"+$res+"</font>"
!endfunction

!function $desc($txt)
  !return "<font:Arial><color:Gray><i>// "+$txt+"</i></color></font>"
!endfunction

!function $lock_acq_fail_text()
  !return "<back:yellow><color:red>acquire lock</color></back>"
!endfunction

!function $lock_rel_text()
  !return "<color:yellow><back:black>release lock</back></color>"
!endfunction

!procedure $lock_acq_fail($node)
  $node -> $node : $lock_acq_fail_text()
  activate $node #red
!endprocedure

!procedure $lock_acq_direct($node)
  $node -> $node : <back:yellow>acquire lock</back>
!endprocedure

!procedure $lock_acq_latent($node)
  $lock_acq_direct($node)
  deactivate $node
!endprocedure

!procedure $lock_rel($node)
  $node -> $node : $lock_rel_text()
!endprocedure

!procedure $cond_wait($node)
  $node -> $node : <back:red>cond.wait</back>\n$lock_rel_text()
  activate $node #red
!endprocedure

!procedure $cond_wait($node, $waitName)
  $node -> $node : <back:red>cond.wait</back>\n$lock_rel_text()
  activate $node #red
  note over $node #orange : <font:monospaced>$waitName
!endprocedure

!procedure $cond_notify($NodeA, $NodeB)
  $NodeA --[#blue]> $NodeB : <color:blue>cond.notify</color>
  $NodeB --[#red]> $NodeB : $lock_acq_fail_text()
!endfunction

!procedure $cond_switch($NodeA, $NodeB)
  $cond_notify($NodeA, $NodeB)
  $cond_wait($NodeA)
  $lock_acq_latent($NodeB)
!endfunction

!procedure $cond_switch($NodeA, $NodeB, $waitName)
  $cond_notify($NodeA, $NodeB)
  $cond_wait($NodeA, $waitName)
  $lock_acq_latent($NodeB)
!endfunction

!procedure $flow(envid, $flowname)
  note over CTRL##envid, DualEnv##envid #LightBlue : ↓ flow_##$flowname ↓
!endprocedure

!function $replace($txt, $search, $repl)
  !$replaced = ""
  !while %strpos($txt, $search) >= 0
    !$position = %strpos($txt, $search)
    !$replaced = $replaced + %substr($txt, 0, $position) + $repl
    !$txt = %substr($txt, $position + %strlen($search))
  !endwhile
  !return $replaced + $txt
!endfunction

!procedure $sharevar($node1, $node2, $txt)
  $node1 <--[#gray]> $node2 : <color:gray>$replace($txt,"\n","</color>\n<color:gray>")</color>
!endfunction

!procedure $sharevar($txt)
  $sharevar(CTRL1, CTRL2, $txt)
!endfunction

' avoids super long note lines in the diagram
!function $str($txt)
  !return $replace($txt, "\n", %newline())
!endfunction

box "T1"
  participant "//DualEnv 1//\n$desc(T1)" as DualEnv1
  participant "//Controller//\n$desc(T1)" as CTRL1
  participant "//VcmiEnv//\n$desc(T1)" as env1
end box

box "VCMI (runNetwork thread)"
participant "//BAI 1//\n$desc(T3)" as BAI1
participant "//VCMI//\n$desc(T3)" as VCMI
participant "//BAI 2//\n$desc(T3)" as BAI2
end box

box "T2"
  participant "//VcmiEnv//\n$desc(T2)" as env2
  participant "//Controller//\n$desc(T2)" as CTRL2
  participant "//DualEnv 2//\n$desc(T2)" as DualEnv2
end box

activate BAI1
activate BAI2
BAI1 -[#ddd]> BAI1 :
BAI1 -X BAI1 -- :

]-> DualEnv2 ++ : reset()
DualEnv2 -> CTRL2 ++ : reset()
$flow(2, REG_A)
$cond_wait(CTRL2, "1 (REG_A)")

[-> DualEnv1 ++ : reset()
DualEnv1 -> CTRL1 ++ : reset()
$flow(1, REG_B)
CTRL1 -> env1 ++ : reset()
env1 -> BAI2 : action\n$desc("ACTION_RESET")
BAI2 -X BAI2 -- :

== BATTLE START ==

note over BAI1, BAI2 : (new BAI created)

VCMI -> BAI2 ++ : activeStack
BAI2 -> env1 : getAction(state)
env1 --> CTRL1 -- : obs

$sharevar("self.result = ResetResult()")

note over CTRL1 #yellow
Which side is this result for?
* The other side
$desc("case 2 of 2")
end note

$sharevar("state = OBS_A")
$cond_switch(CTRL1, CTRL2, "2 (REG_B)")
note over CTRL2 : assert state == OBS_A
CTRL2 --> DualEnv2 -- : obs
DualEnv2 -->] -- : obs

]-> DualEnv2 ++ : step(action)
DualEnv2 -> CTRL2 ++ : step("A", action)
CTRL2 -> env2 ++ : step(action)
env2 -> BAI2 : action
BAI2 -> VCMI -- : makeAction

VCMI -> BAI1 ++ : activeStack
BAI1 -> env2 : getAction(state)
env2 --> CTRL2 -- : obs
$sharevar("self.result = StepResult()")
note over CTRL2
info["side"] != side
 => flow OTHER
end note
$flow(2, OTHER)
$sharevar("state = OBS_B")
$cond_switch(CTRL2, CTRL1, "3 (OTHER)")
note over CTRL1 : assert state == OBS_B
CTRL1 --> DualEnv1 -- : obs
DualEnv1 -->[ -- : obs




''''''''''''''''''''''''''''''
''' HORIZONTAL SPACING

BAI1 -[#ddd]> env1 : $hspace(20)
BAI2 -[#ddd]> env2 : $hspace(20)

@enduml
