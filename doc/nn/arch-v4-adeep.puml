@startuml "arch-vcmi-fullyconv"
' left to right direction

skinparam defaultTextAlignment center
skinparam NoteTextAlignment left

<style>
Usecase {
  BackGroundColor #efe
}


</style>

'''
''' Utility functions
'''

!function $replace($txt, $search, $repl)
  !$replaced = ""
  !while %strpos($txt, $search) >= 0
    !$position = %strpos($txt, $search)
    !$replaced = $replaced + %substr($txt, 0, $position) + $repl
    !$txt = %substr($txt, $position + %strlen($search))
  !endwhile
  !return $replaced + $txt
!endfunction

' Wraps each line of $txt within $open and $close
' Example:
'   $tagged_text("<color:red>", "two\nlines", "</color>")
'   => "<color:red>two</color>\n<color:red>lines</color>")"
!function $tagged_text($open, $txt, $close) return $open + $replace($txt, "\n", $close+"\n"+$open) + $close

!function $node_text($name) return $tagged_text("<b>", $name, "</b>")
!function $node_text($name, $desc) return $node_text($name)+"\n"+$tagged_text("<font:monospaced><size:10>", $desc, "</size></font>")
!function $node_text($name, $desc, $txt) return $node_text($name, $desc)+"\n\n"+$tagged_text("<color:888><size:10>", $txt, "</size></color>")

'''
''' Node types
'''

' Data
!procedure $Data($id, $name)
  Usecase $id as "$node_text($name)"
!endprocedure

!procedure $Data($id, $name, $desc)
  Usecase $id as "$node_text($name, $desc)"
!endprocedure

!procedure $Data($id, $name, $desc, $txt)
  Usecase $id as "$node_text($name, $desc, $txt)"
!endprocedure

' FC (FC)
!procedure $FC($id, $name, $desc)
  Hexagon $id as "$node_text($name, $desc)"
!endprocedure
!procedure $FC($id, $name, $desc, $txt)
  Hexagon $id as "$node_text($name, $desc, $txt)"
!endprocedure

' Transformer
!procedure $Transformer($id, $name, $desc)
  Queue $id as "$node_text($name, $desc)"
!endprocedure
!procedure $Transformer($id, $name, $desc, $txt)
  Queue $id as "$node_text($name, $desc, $txt)"
!endprocedure

' Convolution
!procedure $Convolution($id, $name, $desc)
  Node $id as "$node_text($name, $desc)"
!endprocedure
!procedure $Convolution($id, $name, $desc, $txt)
  Node $id as "$node_text($name, $desc, $txt)"
!endprocedure

' Output
!procedure $Output($id, $name)
  Component $id as "$node_text($name)" #orange
!endprocedure

!procedure $Output($id, $name, $desc)
  Component $id as "$node_text($name, $desc)" #orange
!endprocedure

' Condition
!procedure $Condition($id, $name)
  Boundary $id as "$node_text($name)"
!endprocedure

!procedure $Condition($id, $name, $desc)
  Boundary $id as "$node_text($name, $desc)"
!endprocedure

' Reshape
!procedure $Reshape($id)
  Control $id as " "
!endprocedure

' Activation
!procedure $Activation($id, $name)
  Action $id as "$name"
!endprocedure

' Sum / Mean / etc.
!procedure $Op($id, $name)
  Agent $id as "$name"
!endprocedure
!procedure $Op($id, $name, $txt)
  ' Agent $id as "$node_text($name, "", $txt)"
  Agent $id as "$name\n$tagged_text("<color:888><size:10>", $txt, "</size></color>")"
!endprocedure

' Link
!procedure $Link($a, $b, $dim)
  $a --> $b : " $dim "
!endprocedure
!procedure $Link($a, $b, $dim, $txt)
  ' The newline causes a bug where the 1st line appears
  ' on the top-left side
  ' ...but it looks better that way
  $a --> $b : " $dim "\n$txt
!endprocedure

' title "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"
' left to right direction

$Data(state, "State", "", "<<H3 screenshot here>>")
$Data(obs_stacks, "Stack data", "20 stacks\n**<<S>>** attributes each", "S=102")
$Data(obs_hexes, "Hex data", "165 hexes\n**<<H>>** attributes each", "H=65")
$Data(obs_misc, "Misc. data", "**<<M>>** attributes", "M=4")
$Link(state, obs_stacks, "")
$Link(state, obs_hexes, "")
$Link(state, obs_misc, "")

$Transformer(attn_stacks, "Self-Attention", "embed_dim=S")
$Transformer(attn_hexes, "Self-Attention", "embed_dim=H")
$Link(obs_stacks, attn_stacks, "(20, H)")
$Link(obs_hexes, attn_hexes, "(165, H)")

$FC(fc_stacks, "FC", "S → 256 → 32", "20 channels")
$FC(fc_hexes, "FC", "S → 256 → 16", "165 channels")
$FC(fc_misc, "FC", "M → 16 → 4")
$Link(obs_misc, fc_misc, "(M,)")
$Link(attn_hexes, fc_hexes, "(165, H)")
$Link(attn_stacks, fc_stacks, "(20, S)")

$Op(flatten_hexes, "Flatten")
$Op(flatten_stacks, "Flatten")
$Link(fc_hexes, flatten_hexes, "(165, 16)")
$Link(fc_stacks, flatten_stacks, "(20, 32)")

$Op(concat, "Concat")

$Link(fc_misc, concat, "(4,)")
flatten_stacks -> concat : (640,)
concat <- flatten_hexes : (2640,)

$FC(mlp0, "FC", "3284 → 512")
$Link(concat, mlp0, "(3284,)")
$FC(action_mlp, "FC", "512 → 2312")
$Link(mlp0, action_mlp, "(512,)")
$FC(value_mlp, "FC", "512 → 1")
$Link(mlp0, value_mlp, "(512,)")

$Output(action, "Action")
$Link(action_mlp, action, "(2312,)")

$Output(value, "Value")
$Link(value_mlp, value, "(1,)")

@enduml

